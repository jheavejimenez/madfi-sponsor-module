// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class InitReferenceModule extends ethereum.Event {
  get params(): InitReferenceModule__Params {
    return new InitReferenceModule__Params(this);
  }
}

export class InitReferenceModule__Params {
  _event: InitReferenceModule;

  constructor(event: InitReferenceModule) {
    this._event = event;
  }

  get profileId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pubId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get superToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minSeconds(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tag(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class MirrorCreated extends ethereum.Event {
  get params(): MirrorCreated__Params {
    return new MirrorCreated__Params(this);
  }
}

export class MirrorCreated__Params {
  _event: MirrorCreated;

  constructor(event: MirrorCreated) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get profileId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pubId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get profileIdPointed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get pubIdPointed(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class MirrorStreamDeleted extends ethereum.Event {
  get params(): MirrorStreamDeleted__Params {
    return new MirrorStreamDeleted__Params(this);
  }
}

export class MirrorStreamDeleted__Params {
  _event: MirrorStreamDeleted;

  constructor(event: MirrorStreamDeleted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pubId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MirrorStreamUpdated extends ethereum.Event {
  get params(): MirrorStreamUpdated__Params {
    return new MirrorStreamUpdated__Params(this);
  }
}

export class MirrorStreamUpdated__Params {
  _event: MirrorStreamUpdated;

  constructor(event: MirrorStreamUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pubId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get flowRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SponsorModule extends ethereum.SmartContract {
  static bind(address: Address): SponsorModule {
    return new SponsorModule("SponsorModule", address);
  }

  HUB(): Address {
    let result = super.call("HUB", "HUB():(address)", []);

    return result[0].toAddress();
  }

  try_HUB(): ethereum.CallResult<Address> {
    let result = super.tryCall("HUB", "HUB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SF_CFA_ID(): Bytes {
    let result = super.call("SF_CFA_ID", "SF_CFA_ID():(bytes)", []);

    return result[0].toBytes();
  }

  try_SF_CFA_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SF_CFA_ID", "SF_CFA_ID():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  initializeReferenceModule(
    profileId: BigInt,
    pubId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "initializeReferenceModule",
      "initializeReferenceModule(uint256,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(pubId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_initializeReferenceModule(
    profileId: BigInt,
    pubId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "initializeReferenceModule",
      "initializeReferenceModule(uint256,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(profileId),
        ethereum.Value.fromUnsignedBigInt(pubId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isMirrorValid(sponsorProfileId: BigInt, mirrorPubId: BigInt): boolean {
    let result = super.call(
      "isMirrorValid",
      "isMirrorValid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(sponsorProfileId),
        ethereum.Value.fromUnsignedBigInt(mirrorPubId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isMirrorValid(
    sponsorProfileId: BigInt,
    mirrorPubId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMirrorValid",
      "isMirrorValid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(sponsorProfileId),
        ethereum.Value.fromUnsignedBigInt(mirrorPubId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get hub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get host(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeReferenceModuleCall extends ethereum.Call {
  get inputs(): InitializeReferenceModuleCall__Inputs {
    return new InitializeReferenceModuleCall__Inputs(this);
  }

  get outputs(): InitializeReferenceModuleCall__Outputs {
    return new InitializeReferenceModuleCall__Outputs(this);
  }
}

export class InitializeReferenceModuleCall__Inputs {
  _call: InitializeReferenceModuleCall;

  constructor(call: InitializeReferenceModuleCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pubId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class InitializeReferenceModuleCall__Outputs {
  _call: InitializeReferenceModuleCall;

  constructor(call: InitializeReferenceModuleCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ProcessCommentCall extends ethereum.Call {
  get inputs(): ProcessCommentCall__Inputs {
    return new ProcessCommentCall__Inputs(this);
  }

  get outputs(): ProcessCommentCall__Outputs {
    return new ProcessCommentCall__Outputs(this);
  }
}

export class ProcessCommentCall__Inputs {
  _call: ProcessCommentCall;

  constructor(call: ProcessCommentCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get profileIdPointed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pubIdPointed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ProcessCommentCall__Outputs {
  _call: ProcessCommentCall;

  constructor(call: ProcessCommentCall) {
    this._call = call;
  }
}

export class ProcessMirrorCall extends ethereum.Call {
  get inputs(): ProcessMirrorCall__Inputs {
    return new ProcessMirrorCall__Inputs(this);
  }

  get outputs(): ProcessMirrorCall__Outputs {
    return new ProcessMirrorCall__Outputs(this);
  }
}

export class ProcessMirrorCall__Inputs {
  _call: ProcessMirrorCall;

  constructor(call: ProcessMirrorCall) {
    this._call = call;
  }

  get profileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get profileIdPointed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pubIdPointed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ProcessMirrorCall__Outputs {
  _call: ProcessMirrorCall;

  constructor(call: ProcessMirrorCall) {
    this._call = call;
  }
}
